/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createAccount } from '../fn/account/create-account';
import { CreateAccount$Params } from '../fn/account/create-account';
import { CreateAccountResponse } from '../models/create-account-response';
import { deleteAccount } from '../fn/account/delete-account';
import { DeleteAccount$Params } from '../fn/account/delete-account';
import { getAccountById } from '../fn/account/get-account-by-id';
import { GetAccountById$Params } from '../fn/account/get-account-by-id';
import { GetAccountByIdResponse } from '../models/get-account-by-id-response';
import { PageableResponseOfSearchAccountResponse } from '../models/pageable-response-of-search-account-response';
import { searchAccount } from '../fn/account/search-account';
import { SearchAccount$Params } from '../fn/account/search-account';
import { updateAccount } from '../fn/account/update-account';
import { UpdateAccount$Params } from '../fn/account/update-account';

@Injectable({ providedIn: 'root' })
export class AccountService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateAccount()` */
  static readonly UpdateAccountPath = '/account/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount$Response(params: UpdateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateAccount(params: UpdateAccount$Params, context?: HttpContext): Observable<void> {
    return this.updateAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchAccount()` */
  static readonly SearchAccountPath = '/account/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchAccount$Response(params: SearchAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<PageableResponseOfSearchAccountResponse>> {
    return searchAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchAccount(params: SearchAccount$Params, context?: HttpContext): Observable<PageableResponseOfSearchAccountResponse> {
    return this.searchAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageableResponseOfSearchAccountResponse>): PageableResponseOfSearchAccountResponse => r.body)
    );
  }

  /** Path part for operation `getAccountById()` */
  static readonly GetAccountByIdPath = '/account/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAccountById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccountById$Response(params: GetAccountById$Params, context?: HttpContext): Observable<StrictHttpResponse<GetAccountByIdResponse>> {
    return getAccountById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAccountById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAccountById(params: GetAccountById$Params, context?: HttpContext): Observable<GetAccountByIdResponse> {
    return this.getAccountById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GetAccountByIdResponse>): GetAccountByIdResponse => r.body)
    );
  }

  /** Path part for operation `deleteAccount()` */
  static readonly DeleteAccountPath = '/account/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAccount()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAccount$Response(params: DeleteAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAccount$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAccount(params: DeleteAccount$Params, context?: HttpContext): Observable<void> {
    return this.deleteAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createAccount()` */
  static readonly CreateAccountPath = '/account/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount$Response(params: CreateAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<CreateAccountResponse>> {
    return createAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createAccount(params: CreateAccount$Params, context?: HttpContext): Observable<CreateAccountResponse> {
    return this.createAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<CreateAccountResponse>): CreateAccountResponse => r.body)
    );
  }

}
