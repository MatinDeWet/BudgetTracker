/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApplicationTokenResponse } from '../models/application-token-response';
import { authLogin } from '../fn/auth/auth-login';
import { AuthLogin$Params } from '../fn/auth/auth-login';
import { authRegister } from '../fn/auth/auth-register';
import { AuthRegister$Params } from '../fn/auth/auth-register';
import { userTokenService } from '../fn/auth/user-token-service';
import { UserTokenService$Params } from '../fn/auth/user-token-service';

@Injectable({ providedIn: 'root' })
export class AuthService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `userTokenService()` */
  static readonly UserTokenServicePath = '/auth/refresh-token';

  /**
   * this is the refresh token endpoint
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `userTokenService()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userTokenService$Response(params: UserTokenService$Params, context?: HttpContext): Observable<StrictHttpResponse<ApplicationTokenResponse>> {
    return userTokenService(this.http, this.rootUrl, params, context);
  }

  /**
   * this is the refresh token endpoint
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `userTokenService$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  userTokenService(params: UserTokenService$Params, context?: HttpContext): Observable<ApplicationTokenResponse> {
    return this.userTokenService$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApplicationTokenResponse>): ApplicationTokenResponse => r.body)
    );
  }

  /** Path part for operation `authRegister()` */
  static readonly AuthRegisterPath = '/auth/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authRegister()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRegister$Response(params: AuthRegister$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return authRegister(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authRegister$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authRegister(params: AuthRegister$Params, context?: HttpContext): Observable<void> {
    return this.authRegister$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `authLogin()` */
  static readonly AuthLoginPath = '/auth/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `authLogin()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authLogin$Response(params: AuthLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<ApplicationTokenResponse>> {
    return authLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `authLogin$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  authLogin(params: AuthLogin$Params, context?: HttpContext): Observable<ApplicationTokenResponse> {
    return this.authLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApplicationTokenResponse>): ApplicationTokenResponse => r.body)
    );
  }

}
