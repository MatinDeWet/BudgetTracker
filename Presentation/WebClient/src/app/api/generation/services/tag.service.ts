/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTag } from '../fn/tag/create-tag';
import { CreateTag$Params } from '../fn/tag/create-tag';
import { deleteTag } from '../fn/tag/delete-tag';
import { DeleteTag$Params } from '../fn/tag/delete-tag';
import { getTagById } from '../fn/tag/get-tag-by-id';
import { GetTagById$Params } from '../fn/tag/get-tag-by-id';
import { GetTagByIdResponse } from '../models/get-tag-by-id-response';
import { PageableResponseOfSearchTagResponse } from '../models/pageable-response-of-search-tag-response';
import { searchTag } from '../fn/tag/search-tag';
import { SearchTag$Params } from '../fn/tag/search-tag';
import { updateTag } from '../fn/tag/update-tag';
import { UpdateTag$Params } from '../fn/tag/update-tag';

@Injectable({ providedIn: 'root' })
export class TagService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTag()` */
  static readonly UpdateTagPath = '/tag/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTag()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTag$Response(params: UpdateTag$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateTag(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTag$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTag(params: UpdateTag$Params, context?: HttpContext): Observable<void> {
    return this.updateTag$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `searchTag()` */
  static readonly SearchTagPath = '/tag/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchTag()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchTag$Response(params: SearchTag$Params, context?: HttpContext): Observable<StrictHttpResponse<PageableResponseOfSearchTagResponse>> {
    return searchTag(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchTag$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchTag(params: SearchTag$Params, context?: HttpContext): Observable<PageableResponseOfSearchTagResponse> {
    return this.searchTag$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageableResponseOfSearchTagResponse>): PageableResponseOfSearchTagResponse => r.body)
    );
  }

  /** Path part for operation `getTagById()` */
  static readonly GetTagByIdPath = '/tag/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTagById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTagById$Response(params: GetTagById$Params, context?: HttpContext): Observable<StrictHttpResponse<GetTagByIdResponse>> {
    return getTagById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTagById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTagById(params: GetTagById$Params, context?: HttpContext): Observable<GetTagByIdResponse> {
    return this.getTagById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GetTagByIdResponse>): GetTagByIdResponse => r.body)
    );
  }

  /** Path part for operation `deleteTag()` */
  static readonly DeleteTagPath = '/tag/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTag()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTag$Response(params: DeleteTag$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTag(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTag$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTag(params: DeleteTag$Params, context?: HttpContext): Observable<void> {
    return this.deleteTag$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createTag()` */
  static readonly CreateTagPath = '/tag/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTag()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTag$Response(params: CreateTag$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return createTag(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTag$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTag(params: CreateTag$Params, context?: HttpContext): Observable<void> {
    return this.createTag$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
